name: CI for Go Code #Naming the workflow

#control when work flow will run
on: #for event triggering, with multiple events
  push:
    branches: [main]  # fliter list with one item main, add commas for more branches to monitor
  pull_request:
    branches: [main]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs: # job to execute?
  build: # job name (job_id)
    name: Load OS # name for printing
    runs-on: ubuntu-latest  # specify OS in virtual machine
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # steps: with - specifies as a multiline list for every - *
    
    # Runs a set of commands using the runners shell
    - name: Print hello
      run: |  # | YAML interpret as a literal block for characters following
        ls
        echo Hello!!
        
    # Setup go environment     
    - name: Setup Go
      uses: actions/setup-go@v3.2.0
      with:
        go-version: 1.18
        
    # Check go version
    - name: Check Go Version
      run: go version
    
    # checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: Checkout Repo
      uses: actions/checkout@v2.4.2
    
    # list files in repository
    - name: Check File System
      run: |
        echo "The Operating System on the runner is $env:RUNNER_OS."
        ls
        
    # check-out a private repository
    - name: Checkout Remote Private Repo
      uses: actions/checkout@v2.4.2
      with:
         repository: lowkh2/GoSchoolRemoteExample
         token: ${{ secrets.GO_SECRET }}
         path: remote
         
    # display remote file
    - name: Check remote files
      run: |        # | YAML interpret as a literal block for characters following
        cd remote
        ls
        cat myText.txt
        cd ..
    
    # install dependencies
    - name: Install dependencies
      run: |       # | YAML interpret as a block for characters following
        go build  #if you do not have mod and sum in the repo, go build alone won't work. or you can use go mod init <name>, go get github.com/franela/goblin and go mod tidy
        # go mod tidy
        # go get github.com/franela/goblin
        go install github.com/tebeka/go2xunit@latest
        go test -v
        go test -v | go2xunit -output tests.xml   # convert to xml
        
    # Publish Test Result which requires a *.xml    
    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v1
      if: always()   # if default is success(), so always() run regardless result of earlier steps
      with:
        files: "tests.xml"
    
    # if previous step test fails, create an issue to github actor
    - if:  ${{ failure() }}
      uses: nashmaniac/create-issue-action@v1.1
      name: Create Issue Action
      with:
        title: Build Failed
        token: ${{secrets.GITHUB_TOKEN}}
        assignees: ${{github.actor}}
        labels: worflow-failed
        body: Workflow failed for commit ${{github.sha}}
     
    # send message to telegram
    - name: send default message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_ID }}        # Secret in Repository secret
        token: ${{ secrets.TELEGRAM_TOKEN }}  # Secret in Repository secret
        message: |
          ${{ github.actor }} created commit:
          Commit message: ${{ github.event.commits[0].message }}
          
          Repository: ${{ github.repository }}
            
          See changes: https://github.com/${{ github.repository }}/commit/${{github.sha}} 
